/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip
    );
    logic [31:0] M_alu_a;
    logic [31:0] M_alu_b;
    logic [5:0] M_alu_alufn;
    logic [31:0] M_alu_out;
    logic M_alu_z;
    logic M_alu_v;
    logic M_alu_n;
    
    alu alu (
        .a(M_alu_a),
        .b(M_alu_b),
        .alufn(M_alu_alufn),
        .out(M_alu_out),
        .z(M_alu_z),
        .v(M_alu_v),
        .n(M_alu_n)
    );
    
    
    localparam _MP_DIGITS_690898855 = 3'h4;
    localparam _MP_LEADING_ZEROS_690898855 = 1'h0;
    logic [13:0] M_in_state_renderer_value;
    logic [3:0][3:0] M_in_state_renderer_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_690898855),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_690898855)
    ) in_state_renderer (
        .value(M_in_state_renderer_value),
        .digits(M_in_state_renderer_digits)
    );
    
    
    logic [2:0] M_regfile_wa;
    logic [2:0] M_regfile_ra1;
    logic [2:0] M_regfile_ra2;
    logic M_regfile_we;
    logic [31:0] M_regfile_wdsel;
    logic [31:0] M_regfile_rd1;
    logic [31:0] M_regfile_rd2;
    logic [31:0] M_regfile_led1;
    logic [31:0] M_regfile_led2;
    logic [31:0] M_regfile_led3;
    logic [31:0] M_regfile_score;
    
    regfile regfile (
        .clk(clk),
        .rst(rst_n),
        .wa(M_regfile_wa),
        .ra1(M_regfile_ra1),
        .ra2(M_regfile_ra2),
        .we(M_regfile_we),
        .wdsel(M_regfile_wdsel),
        .rd1(M_regfile_rd1),
        .rd2(M_regfile_rd2),
        .led1(M_regfile_led1),
        .led2(M_regfile_led2),
        .led3(M_regfile_led3),
        .score(M_regfile_score)
    );
    
    
    logic rst;
    logic slow_clock;
    logic [5:0] alufn;
    logic asel;
    logic bsel;
    logic [1:0] wdsel;
    logic [2:0] ra1;
    logic [2:0] ra2;
    logic [2:0] wa;
    logic we;
    logic [31:0] alu_out;
    localparam E_States_START = 5'h0;
    localparam E_States_IDLE1 = 5'h1;
    localparam E_States_PAUSE = 5'h2;
    localparam E_States_DECREASE_CLK_NO_PRESS = 5'h3;
    localparam E_States_CHECK_CLK_OVER_NO_PRESS = 5'h4;
    localparam E_States_DEDUCT_SCORE_NO_PRESS = 5'h5;
    localparam E_States_CLAMP_SCORE_TO_ZERO_NO_PRESS = 5'h6;
    localparam E_States_CHECK_CORRECT_INPUT_1 = 5'h7;
    localparam E_States_CHECK_CORRECT_INPUT_2 = 5'h8;
    localparam E_States_CHECK_CORRECT_INPUT_3 = 5'h9;
    localparam E_States_INCREMENT_SCORE = 5'ha;
    localparam E_States_DEDUCT_SCORE = 5'hb;
    localparam E_States_CLAMP_SCORE_TO_ZERO = 5'hc;
    localparam E_States_IDLE2 = 5'hd;
    localparam E_States_DECREASE_CLK = 5'he;
    localparam E_States_CHECK_CLK_OVER = 5'hf;
    localparam E_States_RESET_CLK = 5'h10;
    localparam E_States_UPDATE_POSITION_1 = 5'h11;
    localparam E_States_UPDATE_POSITION_2 = 5'h12;
    localparam E_States_UPDATE_POSITION_3 = 5'h13;
    localparam E_States_CHECK_END = 5'h14;
    localparam SEVEN_SEG_DIV = 5'h10;
    localparam CLK_FREQ = 24'h989680;
    localparam SLOW_CLOCK_DEFAULT_SPEED = 5'h1a;
    logic M_asel_mux_s0;
    logic [31:0] M_asel_mux_i0;
    logic [31:0] M_asel_mux_i1;
    logic [31:0] M_asel_mux_out;
    
    mux_2 asel_mux (
        .s0(M_asel_mux_s0),
        .i0(M_asel_mux_i0),
        .i1(M_asel_mux_i1),
        .out(M_asel_mux_out)
    );
    
    
    logic M_bsel_mux_s0;
    logic [31:0] M_bsel_mux_i0;
    logic [31:0] M_bsel_mux_i1;
    logic [31:0] M_bsel_mux_out;
    
    mux_2 bsel_mux (
        .s0(M_bsel_mux_s0),
        .i0(M_bsel_mux_i0),
        .i1(M_bsel_mux_i1),
        .out(M_bsel_mux_out)
    );
    
    
    logic [1:0] M_wdsel_mux_s0;
    logic [3:0][31:0] M_wdsel_mux_in;
    logic [31:0] M_wdsel_mux_out;
    
    mux_4_32_bit_1_sel wdsel_mux (
        .s0(M_wdsel_mux_s0),
        .in(M_wdsel_mux_in),
        .out(M_wdsel_mux_out)
    );
    
    
    localparam _MP_STAGES_994774436 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_994774436)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam logic [4:0][0:0] _MP_RISE_1833019628 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [4:0][0:0] _MP_FALL_1833019628 = {{1'h0, 1'h0, 1'h0, 1'h0, 1'h0}};
    logic [4:0] M_io_button_edge_in;
    logic [4:0] M_io_button_edge_out;
    
    genvar idx_0_1833019628;
    
    generate
        for (idx_0_1833019628 = 0; idx_0_1833019628 < 5; idx_0_1833019628 = idx_0_1833019628 + 1) begin: forLoop_idx_0_1833019628
            edge_detector #(
                .RISE(_MP_RISE_1833019628[idx_0_1833019628]),
                .FALL(_MP_FALL_1833019628[idx_0_1833019628])
            ) io_button_edge (
                .clk(clk),
                .in(M_io_button_edge_in[idx_0_1833019628]),
                .out(M_io_button_edge_out[idx_0_1833019628])
            );
        end
    endgenerate
    
    
    localparam _MP_RISE_2026951811 = 1'h1;
    localparam _MP_FALL_2026951811 = 1'h0;
    logic M_slow_clock_edge_in;
    logic M_slow_clock_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_2026951811),
        .FALL(_MP_FALL_2026951811)
    ) slow_clock_edge (
        .clk(clk),
        .in(M_slow_clock_edge_in),
        .out(M_slow_clock_edge_out)
    );
    
    
    localparam logic [4:0][23:0] _MP_CLK_FREQ_1943555153 = {{24'h989680, 24'h989680, 24'h989680, 24'h989680, 24'h989680}};
    localparam _MP_MIN_DELAY_1943555153 = 5'h14;
    localparam _MP_NUM_SYNC_1943555153 = 2'h2;
    logic [4:0] M_io_button_cond_in;
    logic [4:0] M_io_button_cond_out;
    
    genvar idx_0_1943555153;
    
    generate
        for (idx_0_1943555153 = 0; idx_0_1943555153 < 5; idx_0_1943555153 = idx_0_1943555153 + 1) begin: forLoop_idx_0_1943555153
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_1943555153[idx_0_1943555153]),
                .MIN_DELAY(_MP_MIN_DELAY_1943555153),
                .NUM_SYNC(_MP_NUM_SYNC_1943555153)
            ) io_button_cond (
                .clk(clk),
                .in(M_io_button_cond_in[idx_0_1943555153]),
                .out(M_io_button_cond_out[idx_0_1943555153])
            );
        end
    endgenerate
    
    
    logic [4:0] D_state_d, D_state_q = 5'h0;
    localparam _MP_DIGITS_647865842 = 3'h4;
    localparam _MP_DIV_647865842 = 5'h10;
    logic [3:0][3:0] M_seg_values;
    logic [6:0] M_seg_seg;
    logic [3:0] M_seg_sel;
    
    multi_seven_seg #(
        .DIGITS(_MP_DIGITS_647865842),
        .DIV(_MP_DIV_647865842)
    ) seg (
        .clk(clk),
        .rst(rst),
        .values(M_seg_values),
        .seg(M_seg_seg),
        .sel(M_seg_sel)
    );
    
    
    localparam _MP_SIZE_360537614 = 1'h1;
    localparam _MP_DIV_360537614 = 5'h1a;
    localparam _MP_TOP_360537614 = 1'h0;
    localparam _MP_UP_360537614 = 1'h1;
    logic [0:0] M_counter_value;
    
    counter #(
        .SIZE(_MP_SIZE_360537614),
        .DIV(_MP_DIV_360537614),
        .TOP(_MP_TOP_360537614),
        .UP(_MP_UP_360537614)
    ) counter (
        .clk(clk),
        .rst(rst),
        .value(M_counter_value)
    );
    
    
    always @* begin
        D_state_d = D_state_q;
        
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        usb_tx = usb_rx;
        M_io_button_cond_in = io_button;
        M_io_button_edge_in = M_io_button_cond_out;
        slow_clock = M_counter_value;
        M_slow_clock_edge_in = slow_clock;
        ra1 = 3'h0;
        ra2 = 3'h0;
        wa = 3'h0;
        we = 1'h0;
        alufn = 6'h0;
        asel = 1'h0;
        bsel = 1'h0;
        wdsel = 1'h0;
        alu_out = M_alu_out;
        
        case (D_state_q)
            5'h0: begin
                we = 1'h0;
                if (M_io_button_edge_out[1'h0]) begin
                    D_state_d = 5'h1;
                end
            end
            5'h1: begin
                we = 1'h0;
                if (M_slow_clock_edge_out) begin
                    D_state_d = 5'h3;
                end
                if (M_io_button_edge_out[1'h0]) begin
                    D_state_d = 5'h2;
                end
                if (M_io_button_edge_out[2'h3]) begin
                    D_state_d = 5'h7;
                end
                if (M_io_button_edge_out[1'h1]) begin
                    D_state_d = 5'h8;
                end
                if (M_io_button_edge_out[3'h4]) begin
                    D_state_d = 5'h9;
                end
            end
            5'h2: begin
                we = 1'h0;
                if (M_io_button_edge_out[1'h0]) begin
                    D_state_d = 5'h1;
                end
            end
            5'h3: begin
                ra1 = 3'h4;
                wa = 3'h4;
                we = 1'h1;
                alufn = 6'h1;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                D_state_d = 5'h4;
            end
            5'h4: begin
                ra1 = 3'h4;
                ra2 = 3'h7;
                we = 1'h0;
                alufn = 6'h33;
                asel = 1'h0;
                bsel = 1'h0;
                wdsel = 2'h0;
                if (alu_out[1'h0] == 1'h0) begin
                    D_state_d = 5'h1;
                end else begin
                    if (alu_out[1'h0] == 1'h1) begin
                        D_state_d = 5'h5;
                    end
                end
            end
            5'h5: begin
                ra1 = 2'h3;
                wa = 2'h3;
                we = 1'h1;
                alufn = 6'h1;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                D_state_d = 5'h6;
            end
            5'h6: begin
                ra1 = 2'h3;
                ra2 = 3'h7;
                we = 1'h0;
                alufn = 6'h33;
                asel = 1'h0;
                bsel = 1'h0;
                wdsel = 2'h0;
                D_state_d = 5'h10;
            end
            5'h7: begin
                ra1 = 1'h0;
                we = 1'h0;
                alufn = 6'h11;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                if (alu_out == 1'h1) begin
                    D_state_d = 5'ha;
                end else begin
                    if (alu_out == 1'h0) begin
                        D_state_d = 5'hb;
                    end
                end
            end
            5'h8: begin
                ra1 = 1'h1;
                we = 1'h0;
                alufn = 6'h11;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                if (alu_out == 1'h1) begin
                    D_state_d = 5'ha;
                end else begin
                    if (alu_out == 1'h0) begin
                        D_state_d = 5'hb;
                    end
                end
            end
            5'h9: begin
                ra1 = 2'h2;
                we = 1'h0;
                alufn = 6'h11;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                if (alu_out == 1'h1) begin
                    D_state_d = 5'ha;
                end else begin
                    if (alu_out == 1'h0) begin
                        D_state_d = 5'hb;
                    end
                end
            end
            5'hb: begin
                ra1 = 2'h3;
                wa = 2'h3;
                we = 1'h1;
                alufn = 6'h1;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                D_state_d = 5'hc;
            end
            5'hc: begin
                ra1 = 2'h3;
                wa = 2'h3;
                we = 1'h1;
                alufn = 6'h2;
                asel = 1'h0;
                bsel = 1'h0;
                wdsel = 2'h0;
                D_state_d = 5'hd;
            end
            5'ha: begin
                ra1 = 2'h3;
                wa = 2'h3;
                we = 1'h1;
                alufn = 6'h0;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                D_state_d = 5'hd;
            end
            5'hd: begin
                we = 1'h0;
                if (M_slow_clock_edge_out) begin
                    D_state_d = 5'he;
                end
            end
            5'he: begin
                ra1 = 3'h4;
                wa = 3'h4;
                we = 1'h1;
                alufn = 6'h1;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                D_state_d = 5'hf;
            end
            5'hf: begin
                ra1 = 3'h4;
                ra2 = 3'h7;
                we = 1'h0;
                alufn = 6'h33;
                asel = 1'h0;
                bsel = 1'h0;
                wdsel = 2'h0;
                if (alu_out[1'h0] == 1'h0) begin
                    D_state_d = 5'hd;
                end else begin
                    if (alu_out[1'h0] == 1'h1) begin
                        D_state_d = 5'h10;
                    end
                end
            end
            5'h10: begin
                ra1 = 3'h4;
                ra2 = 3'h7;
                wa = 3'h4;
                we = 1'h1;
                alufn = 6'h0;
                asel = 1'h0;
                bsel = 1'h0;
                D_state_d = 5'h11;
            end
            5'h11: begin
                ra1 = 1'h0;
                wa = 1'h0;
                we = 1'h1;
                alufn = 6'h21;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                D_state_d = 5'h12;
            end
            5'h12: begin
                ra1 = 1'h1;
                wa = 1'h1;
                we = 1'h1;
                alufn = 6'h21;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                D_state_d = 5'h13;
            end
            5'h13: begin
                ra1 = 2'h2;
                wa = 2'h2;
                we = 1'h1;
                alufn = 6'h21;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                D_state_d = 5'h14;
            end
            5'h14: begin
                ra1 = 1'h0;
                ra2 = 3'h7;
                we = 1'h0;
                asel = 1'h0;
                bsel = 1'h0;
                wdsel = 2'h0;
                D_state_d = 5'h1;
                D_state_d = 5'h0;
            end
        endcase
        io_led[1'h0] = M_regfile_led1[3'h7:1'h0];
        io_led[1'h1] = M_regfile_led2[3'h7:1'h0];
        io_led[2'h2] = M_regfile_led3[3'h7:1'h0];
        led = {4'h8{M_slow_clock_edge_out}};
        M_asel_mux_s0 = asel;
        M_asel_mux_i1 = 32'h0;
        M_bsel_mux_s0 = bsel;
        M_bsel_mux_i1 = 32'h1;
        M_asel_mux_i0 = M_regfile_rd1;
        M_bsel_mux_i0 = M_regfile_rd2;
        M_wdsel_mux_s0 = wdsel;
        M_wdsel_mux_in[1'h0] = M_alu_out;
        M_wdsel_mux_in[1'h1] = 32'hffff;
        M_wdsel_mux_in[2'h2] = 32'hf;
        M_wdsel_mux_in[2'h3] = 23'h0;
        M_regfile_wa = wa;
        M_regfile_we = we;
        M_regfile_ra1 = ra1;
        M_regfile_ra2 = ra2;
        M_regfile_wdsel = M_wdsel_mux_out;
        M_alu_a = M_asel_mux_out;
        M_alu_b = M_bsel_mux_out;
        M_alu_alufn = alufn;
        M_in_state_renderer_value = D_state_q;
        M_seg_values = M_in_state_renderer_digits;
        io_segment = ~M_seg_seg;
        io_select = ~M_seg_sel;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_state_q <= 5'h0;
        end else begin
            D_state_q <= D_state_d;
        end
    end
endmodule