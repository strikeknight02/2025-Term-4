/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [1:0] alufn,
        output reg [31:0] out
    );
    logic M_mux_s0;
    logic M_mux_s1;
    logic [3:0][31:0] M_mux_in;
    logic [31:0] M_mux_out;
    
    mux_4_32_bit mux (
        .s0(M_mux_s0),
        .s1(M_mux_s1),
        .in(M_mux_in),
        .out(M_mux_out)
    );
    
    
    logic [31:0] M_ls_a;
    logic [4:0] M_ls_b;
    logic [31:0] M_ls_out;
    
    left_shifter ls (
        .a(M_ls_a),
        .b(M_ls_b),
        .out(M_ls_out)
    );
    
    
    logic [31:0] M_rs_a;
    logic [31:0] M_rs_b;
    logic [31:0] M_rs_out;
    
    right_shifter rs (
        .a(M_rs_a),
        .b(M_rs_b),
        .out(M_rs_out)
    );
    
    
    logic [31:0] M_ars_a;
    logic [31:0] M_ars_b;
    logic [31:0] M_ars_out;
    
    arith_right_shifter ars (
        .a(M_ars_a),
        .b(M_ars_b),
        .out(M_ars_out)
    );
    
    
    always @* begin
        M_ls_a = a;
        M_ls_b = b;
        M_rs_a = a;
        M_rs_b = b;
        M_ars_a = a;
        M_ars_b = b;
        M_mux_s0 = alufn[1'h0];
        M_mux_s1 = alufn[1'h1];
        M_mux_in[1'h0] = M_ls_out;
        M_mux_in[1'h1] = M_rs_out;
        M_mux_in[2'h2] = 32'h0;
        M_mux_in[2'h3] = M_ars_out;
        out = M_mux_out;
    end
    
    
endmodule