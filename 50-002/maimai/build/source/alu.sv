/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu (
        input wire [31:0] a,
        input wire [31:0] b,
        input wire [5:0] alufn,
        output reg [31:0] out,
        output reg z,
        output reg v,
        output reg n
    );
    logic M_mux_s0;
    logic M_mux_s1;
    logic [3:0][31:0] M_mux_in;
    logic [31:0] M_mux_out;
    
    mux_4_32_bit mux (
        .s0(M_mux_s0),
        .s1(M_mux_s1),
        .in(M_mux_in),
        .out(M_mux_out)
    );
    
    
    logic M_mux2_s0;
    logic [31:0] M_mux2_i0;
    logic [31:0] M_mux2_i1;
    logic [31:0] M_mux2_out;
    
    mux_2 mux2 (
        .s0(M_mux2_s0),
        .i0(M_mux2_i0),
        .i1(M_mux2_i1),
        .out(M_mux2_out)
    );
    
    
    logic M_mux3_s0;
    logic [31:0] M_mux3_i0;
    logic [31:0] M_mux3_i1;
    logic [31:0] M_mux3_out;
    
    mux_2 mux3 (
        .s0(M_mux3_s0),
        .i0(M_mux3_i0),
        .i1(M_mux3_i1),
        .out(M_mux3_out)
    );
    
    
    logic [31:0] M_clb_a;
    logic [31:0] M_clb_b;
    logic [31:0] M_clb_out;
    
    compare_last_bit clb (
        .a(M_clb_a),
        .b(M_clb_b),
        .out(M_clb_out)
    );
    
    
    localparam _MP_BITS_1986299883 = 6'h20;
    logic [31:0] M_adder_a;
    logic [31:0] M_adder_b;
    logic M_adder_alufn;
    logic [31:0] M_adder_s;
    logic M_adder_v;
    logic M_adder_z;
    logic M_adder_n;
    
    rca #(
        .BITS(_MP_BITS_1986299883)
    ) adder (
        .a(M_adder_a),
        .b(M_adder_b),
        .alufn(M_adder_alufn),
        .s(M_adder_s),
        .v(M_adder_v),
        .z(M_adder_z),
        .n(M_adder_n)
    );
    
    
    logic [3:0] M_boolean_alufn;
    logic [31:0] M_boolean_a;
    logic [31:0] M_boolean_b;
    logic [31:0] M_boolean_out;
    
    boolean boolean (
        .alufn(M_boolean_alufn),
        .a(M_boolean_a),
        .b(M_boolean_b),
        .out(M_boolean_out)
    );
    
    
    logic [1:0] M_compare_alufn;
    logic M_compare_z;
    logic M_compare_v;
    logic M_compare_n;
    logic M_compare_out;
    
    compare compare (
        .alufn(M_compare_alufn),
        .z(M_compare_z),
        .v(M_compare_v),
        .n(M_compare_n),
        .out(M_compare_out)
    );
    
    
    logic [31:0] M_shifter_a;
    logic [4:0] M_shifter_b;
    logic [1:0] M_shifter_alufn;
    logic [31:0] M_shifter_out;
    
    shifter shifter (
        .a(M_shifter_a),
        .b(M_shifter_b),
        .alufn(M_shifter_alufn),
        .out(M_shifter_out)
    );
    
    
    logic [31:0] M_clamp_a;
    logic [31:0] M_clamp_out;
    
    clamp clamp (
        .a(M_clamp_a),
        .out(M_clamp_out)
    );
    
    
    always @* begin
        M_adder_a = a;
        M_adder_b = b;
        M_adder_alufn = alufn[1'h0];
        M_boolean_a = a;
        M_boolean_b = b;
        M_boolean_alufn = alufn[2'h3:1'h0];
        M_compare_z = M_adder_z;
        M_compare_n = M_adder_n;
        M_compare_v = M_adder_v;
        M_compare_alufn = alufn[2'h2:1'h1];
        M_shifter_a = a;
        M_shifter_b = b[3'h4:1'h0];
        M_shifter_alufn = alufn[1'h1:1'h0];
        M_clamp_a = a;
        M_clb_a = a;
        M_clb_b = b;
        M_mux2_s0 = alufn[1'h1];
        M_mux2_i0 = M_adder_s;
        M_mux2_i1 = M_clamp_out;
        M_mux3_s0 = alufn[1'h0];
        M_mux3_i0 = M_boolean_out;
        M_mux3_i1 = M_clb_out;
        M_mux_s0 = alufn[3'h4];
        M_mux_s1 = alufn[3'h5];
        M_mux_in[1'h0] = M_mux2_out;
        M_mux_in[1'h1] = M_mux3_out;
        M_mux_in[2'h2] = M_shifter_out;
        M_mux_in[2'h3] = {31'h0, M_compare_out};
        z = M_adder_z;
        v = M_adder_v;
        n = M_adder_n;
        out = M_mux_out;
    end
    
    
endmodule