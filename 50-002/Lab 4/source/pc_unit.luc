module pc_unit (
    input clk,  // clock
    input rst,  // reset
    input slowclk, // slowclock to advance pc
    input id[16],
    input pcsel[3],
    input reg_data_1[32],
    output pc_4[32],
    output pc_4_sxtc[32],
    output pcsel_out[32], // for debug only, does not exist in pc_unit
    output ia[32]
) {
    
    dff pc[32](#INIT(0),.clk(clk)) // PC Register
    
    sig pcsel_out_sig[32] // output of pcsel unit
    sig pc_4sxtc32_sig[32] // raw pc + 4 + 4*SXT(C)
    sig pc_4sxtc_sig[32] // pc + 4 + 4*SXT(C) with bit 31 handled
    sig pc_4sig[32] // pc + 4 with bit 32 handled
    sig pc_4raw[32] // raw pc + 4

    
    always {
        // default connections to silence errors
        pc.d = pc.q 
        pcsel_out_sig = 0
        pc_4sxtc_sig = 0
        
        // increment pc by 4
        pc_4raw = pc.q + 4
        pc_4sig = c{pc.q[31], pc_4raw[30:0]}            
        
        // TASK 4
        // shift-and-add pc by 4
        // id[15:0] ---> last 16 bit of the instruction (c)
        // we need to sign extend this c ---> c{16x{id[15]}, id[15:0]}, make into 32 bits 
        // then we need to shift to the left by two bits : c{14x{id[15]}, id[15:0], b00}
        pc_4sxtc32_sig = pc.q + 4 + c{14x{id[15]}, id[15:0], b00}
        pc_4sxtc_sig = c{pc.q[31], pc_4sxtc32_sig[30:0]} //  preserve bit 31 of the original pc 
        
        // TASK 1 
        // PCSEL mux 
        case (pcsel){
            b000: 
                pcsel_out_sig = pc_4sig // pc + 4
            b001: 
                pcsel_out_sig = pc_4sxtc_sig // pc + 4 + 4*SEXT(c)
            b010: 
                // REG_DATA_1 bit 31 (MSB) can be 1 or 0 
                // so we need to protect the MSB of our PC, do not blindly copy REG_DATA_1[31] value
                // if PC[31] is already 1, and reg_data_1[31] is 1, then it can remain at 1 
                // otherwise, remain at 0 regardless of reg_data_1[31]
                pcsel_out_sig = c{pc.q[31] & reg_data_1[31], reg_data_1[30:0]}
            b011:
                pcsel_out_sig = h80000004 // ILLOP 
            b100:
                pcsel_out_sig = h80000008 // XAddr
            default:
                pcsel_out_sig = pc.q // default case, output pc reg value without modification
        }
        
        // outside the mux: advance the PC only when slowclk is 1 
        if (slowclk){
            // the b00 at the end is just to make sure that the 
            // address of instruction is word-aligned (multiples of 4)
            pc.d = c{pcsel_out_sig[31:2], b00} // set pcreg content to the output of the pcsel mux only of slowclock is 1
        }
        
        // Task 2
        // RESET mux 
        if(rst){
            pc.d = h80000000 // if reset is pressed, then pc reg goes back to address 0, starts in supervisor mode
        }
        
        // output connections
        ia = pc.q
        pc_4 =  pc_4sig
        pc_4_sxtc = pc_4sxtc_sig
        pcsel_out = pcsel_out_sig
        
        
    }
}