Index: app/src/main/res/layout/activity_login.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\"\r\n    android:padding=\"16dp\">\r\n\r\n    <TextView\r\n        android:id=\"@+id/titleText\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Users!!!\" />\r\n\r\n    <EditText\r\n        android:id=\"@+id/email\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:hint=\"Email\"\r\n        android:inputType=\"textEmailAddress\" />\r\n\r\n    <EditText\r\n        android:id=\"@+id/password\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:hint=\"Password\"\r\n        android:inputType=\"textPassword\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/loginButton\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Login\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/registerButton\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Register\"\r\n        android:backgroundTint=\"@android:color/holo_blue_light\"\r\n        android:textColor=\"@android:color/white\" />\r\n</LinearLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_login.xml b/app/src/main/res/layout/activity_login.xml
--- a/app/src/main/res/layout/activity_login.xml	(revision 367e14383b2879db95787499e599d137333c8c72)
+++ b/app/src/main/res/layout/activity_login.xml	(date 1744112557869)
@@ -1,41 +1,105 @@
 <?xml version="1.0" encoding="utf-8"?>
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+
     android:layout_width="match_parent"
     android:layout_height="match_parent"
+
+    tools:context=".Login"
     android:orientation="vertical"
-    android:padding="16dp">
+    android:background="@color/white"
+    android:padding="20dp">
+    <ImageView
+        android:id="@+id/login_logo"
+        android:layout_width="150dp"
+        android:layout_height="70dp"
+        android:src="@drawable/wowcher_logo"
+        android:scaleType="centerCrop"
+        android:layout_gravity="center"/>
+
+    <TextView
+        android:id="@+id/login_greeting"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:fontFamily="@font/bungee"
+        android:text="Hello there, Welcome Back"
+        android:textSize="40sp"/>
 
     <TextView
-        android:id="@+id/titleText"
+        android:id="@+id/login_instruction"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:text="Users!!!" />
+        android:text="Sign In to continue"
+        android:textSize="18sp"
+        android:fontFamily="@font/antic"/>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="20dp"
+        android:layout_marginBottom="20dp"
+        android:orientation="vertical">
 
-    <EditText
-        android:id="@+id/email"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:hint="Email"
-        android:inputType="textEmailAddress" />
+        <com.google.android.material.textfield.TextInputLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:id="@+id/username"
+            android:hint="Username"
+            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox">
 
-    <EditText
-        android:id="@+id/password"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:hint="Password"
-        android:inputType="textPassword" />
+            <com.google.android.material.textfield.TextInputEditText
+                android:id="@+id/username_input"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"/>
+        </com.google.android.material.textfield.TextInputLayout>
+
+        <com.google.android.material.textfield.TextInputLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:id="@+id/password"
+            android:hint="Password"
+            app:endIconMode="password_toggle"
+            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox">
+
+            <com.google.android.material.textfield.TextInputEditText
+                android:id="@+id/password_input"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:inputType="textPassword"/>
+        </com.google.android.material.textfield.TextInputLayout>
+
 
-    <Button
-        android:id="@+id/loginButton"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:text="Login" />
+        <Button
+            android:layout_width="200dp"
+            android:layout_height="wrap_content"
+            android:background="#00000000"
+            android:text="FORGET PASSWORD?"
+            android:layout_gravity="right"
+            android:elevation="0dp"
+            android:layout_margin="5dp"
+            android:textColor="@color/black"/>
+
+        <Button
+            android:id="@+id/login_button"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="GO"
+            android:background="@color/black"
+            android:textColor="@color/white"
+            android:layout_marginTop="5dp"
+            android:layout_marginBottom="5dp"/>
 
-    <Button
-        android:id="@+id/registerButton"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:text="Register"
-        android:backgroundTint="@android:color/holo_blue_light"
-        android:textColor="@android:color/white" />
-</LinearLayout>
+        <Button
+            android:id="@+id/new_user_button"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="#00000000"
+            android:text="NEW USER? SIGN UP"
+            android:layout_gravity="right"
+            android:elevation="0dp"
+            android:layout_margin="5dp"
+            android:textColor="@color/black"
+            android:fontFamily="@font/antic"/>
+    </LinearLayout>
+</LinearLayout>
\ No newline at end of file
Index: app/google-services.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"project_info\": {\r\n    \"project_number\": \"302527014877\",\r\n    \"project_id\": \"isp1d-1f66f\",\r\n    \"storage_bucket\": \"isp1d-1f66f.firebasestorage.app\"\r\n  },\r\n  \"client\": [\r\n    {\r\n      \"client_info\": {\r\n        \"mobilesdk_app_id\": \"1:302527014877:android:ce5e7798e5abab3fb9f834\",\r\n        \"android_client_info\": {\r\n          \"package_name\": \"com.example.wowcher\"\r\n        }\r\n      },\r\n      \"oauth_client\": [],\r\n      \"api_key\": [\r\n        {\r\n          \"current_key\": \"Insert database api key here\"\r\n        }\r\n      ],\r\n      \"services\": {\r\n        \"appinvite_service\": {\r\n          \"other_platform_oauth_client\": []\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"configuration_version\": \"1\"\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/google-services.json b/app/google-services.json
--- a/app/google-services.json	(revision 367e14383b2879db95787499e599d137333c8c72)
+++ b/app/google-services.json	(date 1744111820970)
@@ -15,7 +15,7 @@
       "oauth_client": [],
       "api_key": [
         {
-          "current_key": "Insert database api key here"
+          "current_key": "AIzaSyD7fDxM4T4f2jWmFUt-3dhP-9VYUOi1ozA"
         }
       ],
       "services": {
Index: app/src/main/java/com/example/wowcher/Login.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.wowcher;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.lifecycle.Observer;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport com.google.firebase.auth.AuthResult;\r\n\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\n\r\nimport com.example.wowcher.classes.User;\r\nimport com.example.wowcher.controller.UserController;\r\nimport com.example.wowcher.controller.UserControllerFactory;\r\nimport com.example.wowcher.db.DBSource;\r\nimport com.example.wowcher.db.UserSource;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\n\r\npublic class Login extends AppCompatActivity {\r\n    private EditText emailField, passwordField;\r\n    private Button loginButton, registerButton;\r\n    private FirebaseAuth mAuth;\r\n    private TextView nameText;\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        // Check if user is signed in (non-null) and update UI accordingly.\r\n        FirebaseUser currentUser = mAuth.getCurrentUser();\r\n        if(currentUser != null){\r\n            Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n            startActivity(intent);\r\n            finish();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n\r\n        mAuth = FirebaseAuth.getInstance();\r\n        FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n        DBSource userSourceInstance = new UserSource(db);\r\n\r\n        // Initialize ViewModel\r\n        UserController userModel = new ViewModelProvider(this, new UserControllerFactory(userSourceInstance)).get(UserController.class);\r\n        userModel.getModelInstance(userModel);\r\n\r\n        // Initialize UI Elements\r\n        emailField = findViewById(R.id.email);\r\n        passwordField = findViewById(R.id.password);\r\n        loginButton = findViewById(R.id.loginButton);\r\n        registerButton = findViewById(R.id.registerButton);\r\n        nameText = findViewById(R.id.titleText);\r\n\r\n        // Ensure nameText is not null\r\n        if (nameText == null) {\r\n            Log.e(\"DEBUG\", \"TextView 'titleText' is NULL! Check activity_login.xml.\");\r\n        }\r\n\r\n\r\n\r\n        // Set Button Listeners\r\n        loginButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                loginUser();\r\n            }\r\n        });\r\n\r\n        registerButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                startActivity(new Intent(Login.this, Register.class));\r\n            }\r\n        });\r\n    }\r\n\r\n    private void loginUser() {\r\n        String email = emailField.getText().toString();\r\n        String password = passwordField.getText().toString();\r\n\r\n        Log.d(\"DEBUG\", \"Email entered: \" + email);\r\n\r\n        if (TextUtils.isEmpty(email) || TextUtils.isEmpty(password)) {\r\n            Toast.makeText(this, \"Please enter all fields\", Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n\r\n        // Validate email format before sending request\r\n        if (!android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {\r\n            Toast.makeText(this, \"Invalid email format\", Toast.LENGTH_SHORT).show();\r\n            Log.e(\"DEBUG\", \"Invalid email format: \" + email);\r\n            return;\r\n        }\r\n\r\n        mAuth.signInWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<AuthResult> task) {\r\n                        if (task.isSuccessful()) {\r\n                            // Sign in success, update UI with the signed-in user's information\r\n\r\n                            Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n                            startActivity(intent);\r\n                            finish();\r\n                        } else {\r\n                            // If sign in fails, display a message to the user.\r\n                             Toast.makeText(Login.this, \"Authentication failed.\",\r\n                                    Toast.LENGTH_SHORT).show();\r\n\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\npublic class Login {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/wowcher/Login.java b/app/src/main/java/com/example/wowcher/Login.java
--- a/app/src/main/java/com/example/wowcher/Login.java	(revision 367e14383b2879db95787499e599d137333c8c72)
+++ b/app/src/main/java/com/example/wowcher/Login.java	(date 1744103928784)
@@ -1,131 +1,129 @@
-package com.example.wowcher;
+    package com.example.wowcher;
 
-import android.content.Intent;
-import android.os.Bundle;
-import android.text.TextUtils;
-import android.util.Log;
-import android.view.View;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.TextView;
-import android.widget.Toast;
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.appcompat.app.AppCompatActivity;
-import androidx.lifecycle.Observer;
-import androidx.lifecycle.ViewModelProvider;
-import com.google.firebase.auth.AuthResult;
+    import android.content.Intent;
+    import android.os.Bundle;
+    import android.text.TextUtils;
+    import android.util.Log;
+    import android.view.View;
+    import android.widget.Button;
+    import android.widget.EditText;
+    import android.widget.TextView;
+    import android.widget.Toast;
+    import androidx.annotation.NonNull;
+    import androidx.annotation.Nullable;
+    import androidx.appcompat.app.AppCompatActivity;
+    import androidx.lifecycle.Observer;
+    import androidx.lifecycle.ViewModelProvider;
+    import com.google.firebase.auth.AuthResult;
 
-import com.google.android.gms.tasks.OnCompleteListener;
-import com.google.android.gms.tasks.Task;
+    import com.google.android.gms.tasks.OnCompleteListener;
+    import com.google.android.gms.tasks.Task;
 
-import com.example.wowcher.classes.User;
-import com.example.wowcher.controller.UserController;
-import com.example.wowcher.controller.UserControllerFactory;
-import com.example.wowcher.db.DBSource;
-import com.example.wowcher.db.UserSource;
-import com.google.firebase.auth.FirebaseAuth;
-import com.google.firebase.auth.FirebaseUser;
-import com.google.firebase.firestore.FirebaseFirestore;
+    import com.example.wowcher.classes.User;
+    import com.example.wowcher.controller.UserController;
+    import com.example.wowcher.controller.UserControllerFactory;
+    import com.example.wowcher.db.DBSource;
+    import com.example.wowcher.db.UserSource;
+    import com.google.firebase.auth.FirebaseAuth;
+    import com.google.firebase.auth.FirebaseUser;
+    import com.google.firebase.firestore.FirebaseFirestore;
 
-public class Login extends AppCompatActivity {
-    private EditText emailField, passwordField;
-    private Button loginButton, registerButton;
-    private FirebaseAuth mAuth;
-    private TextView nameText;
+    public class Login extends AppCompatActivity {
+        private EditText emailField, passwordField;
+        private Button loginButton, registerButton;
+        private FirebaseAuth mAuth;
+        private TextView nameText;
 
-    @Override
-    public void onStart() {
-        super.onStart();
-        // Check if user is signed in (non-null) and update UI accordingly.
-        FirebaseUser currentUser = mAuth.getCurrentUser();
-        if(currentUser != null){
-            Intent intent = new Intent(getApplicationContext(), MainActivity.class);
-            startActivity(intent);
-            finish();
-        }
-    }
+        @Override
+        public void onStart() {
+            super.onStart();
+            // Check if user is signed in (non-null) and update UI accordingly.
+            FirebaseUser currentUser = mAuth.getCurrentUser();
+            if(currentUser != null){
+                Intent intent = new Intent(getApplicationContext(), MainActivity.class);
+                startActivity(intent);
+                finish();
+            }
+        }
 
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_login);
+        @Override
+        protected void onCreate(Bundle savedInstanceState) {
+            super.onCreate(savedInstanceState);
+            setContentView(R.layout.activity_login);
 
-        mAuth = FirebaseAuth.getInstance();
-        FirebaseFirestore db = FirebaseFirestore.getInstance();
-        DBSource userSourceInstance = new UserSource(db);
+            mAuth = FirebaseAuth.getInstance();
+            FirebaseFirestore db = FirebaseFirestore.getInstance();
+            DBSource userSourceInstance = new UserSource(db);
 
-        // Initialize ViewModel
-        UserController userModel = new ViewModelProvider(this, new UserControllerFactory(userSourceInstance)).get(UserController.class);
-        userModel.getModelInstance(userModel);
+            // Initialize ViewModel
+            UserController userModel = new ViewModelProvider(this, new UserControllerFactory(userSourceInstance)).get(UserController.class);
+            userModel.getModelInstance(userModel);
 
-        // Initialize UI Elements
-        emailField = findViewById(R.id.email);
-        passwordField = findViewById(R.id.password);
-        loginButton = findViewById(R.id.loginButton);
-        registerButton = findViewById(R.id.registerButton);
-        nameText = findViewById(R.id.titleText);
+            // Initialize UI Elements
+            emailField = findViewById(R.id.username_input);
+            passwordField = findViewById(R.id.password_input);
+            loginButton = findViewById(R.id.login_button);
+            registerButton = findViewById(R.id.new_user_button);
+    //        nameText = findViewById(R.id.titleText);
 
-        // Ensure nameText is not null
-        if (nameText == null) {
-            Log.e("DEBUG", "TextView 'titleText' is NULL! Check activity_login.xml.");
-        }
+            // Ensure nameText is not null
+            if (nameText == null) {
+                Log.e("DEBUG", "TextView 'titleText' is NULL! Check activity_login.xml.");
+            }
 
 
 
-        // Set Button Listeners
-        loginButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                loginUser();
-            }
-        });
+            // Set Button Listeners
+            loginButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    loginUser();
+                }
+            });
 
-        registerButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                startActivity(new Intent(Login.this, Register.class));
-            }
-        });
-    }
+            registerButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    startActivity(new Intent(Login.this, Register.class));
+                }
+            });
+        }
 
-    private void loginUser() {
-        String email = emailField.getText().toString();
-        String password = passwordField.getText().toString();
+        private void loginUser() {
+            String email = emailField.getText().toString();
+            String password = passwordField.getText().toString();
 
-        Log.d("DEBUG", "Email entered: " + email);
+            Log.d("DEBUG", "Email entered: " + email);
 
-        if (TextUtils.isEmpty(email) || TextUtils.isEmpty(password)) {
-            Toast.makeText(this, "Please enter all fields", Toast.LENGTH_SHORT).show();
-            return;
-        }
+            if (TextUtils.isEmpty(email) || TextUtils.isEmpty(password)) {
+                Toast.makeText(this, "Please enter all fields", Toast.LENGTH_SHORT).show();
+                return;
+            }
 
-        // Validate email format before sending request
-        if (!android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
-            Toast.makeText(this, "Invalid email format", Toast.LENGTH_SHORT).show();
-            Log.e("DEBUG", "Invalid email format: " + email);
-            return;
-        }
+            // Validate email format before sending request
+            if (!android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
+                Toast.makeText(this, "Invalid email format", Toast.LENGTH_SHORT).show();
+                Log.e("DEBUG", "Invalid email format: " + email);
+                return;
+            }
 
-        mAuth.signInWithEmailAndPassword(email, password)
-                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
-                    @Override
-                    public void onComplete(@NonNull Task<AuthResult> task) {
-                        if (task.isSuccessful()) {
-                            // Sign in success, update UI with the signed-in user's information
+            mAuth.signInWithEmailAndPassword(email, password)
+                    .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
+                        @Override
+                        public void onComplete(@NonNull Task<AuthResult> task) {
+                            if (task.isSuccessful()) {
+                                // Sign in success, update UI with the signed-in user's information
 
-                            Intent intent = new Intent(getApplicationContext(), MainActivity.class);
-                            startActivity(intent);
-                            finish();
-                        } else {
-                            // If sign in fails, display a message to the user.
-                             Toast.makeText(Login.this, "Authentication failed.",
-                                    Toast.LENGTH_SHORT).show();
+                                Intent intent = new Intent(getApplicationContext(), MainActivity.class);
+                                startActivity(intent);
+                                finish();
+                            } else {
+                                // If sign in fails, display a message to the user.
+                                 Toast.makeText(Login.this, "Authentication failed.",
+                                        Toast.LENGTH_SHORT).show();
 
-                        }
-                    }
-                });
-    }
-
-public class Login {
-}
+                            }
+                        }
+                    });
+        }
+    }
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2_4_2025_3_55_pm__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2_4_2025_3_55_pm__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2_4_2025_3_55_pm__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2_4_2025_3_55_pm__Changes_.xml	(revision 367e14383b2879db95787499e599d137333c8c72)
+++ /dev/null	(revision 367e14383b2879db95787499e599d137333c8c72)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_2_4_2025_3_55_pm_[Changes]" date="1743580593392" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2_4_2025_3_55_pm_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2/4/2025 3:55 pm [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2_4_2025_3_55_pm_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2_4_2025_3_55_pm_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2_4_2025_3_55_pm_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2_4_2025_3_55_pm_[Changes]/shelved.patch	(revision 367e14383b2879db95787499e599d137333c8c72)
+++ /dev/null	(revision 367e14383b2879db95787499e599d137333c8c72)
@@ -1,639 +0,0 @@
-Index: app/src/main/java/com/example/wowcher/classes/User.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.wowcher.classes;\r\n\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport android.os.Build;\r\n\r\nimport androidx.annotation.RequiresApi;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\n@RequiresApi(api = Build.VERSION_CODES.O)\r\npublic class User {\r\n    private int userId;\r\n    private String username;\r\n    private String role;\r\n    private String createdAt;\r\n    private int availableVouchers;\r\n    private int previousVouchers;\r\n\r\n    //primary key\r\n    public String userId= \"\";\r\n\r\n    public String username = \"\";\r\n    public String role = \"\";\r\n    public String createdAt =  LocalDateTime.now().toString();\r\n    public int availableVouchers = 0;\r\n    public int previousVouchers = 0;\r\n\r\n    //no-arg constructor\r\n    public User(){}\r\n\r\n\r\n    public User(int userId, String username, String role, String createdAt, int availableVouchers, int previousVouchers) {\r\n    //User constructor\r\n    public User(String userId, String username, String role, String createdAt, int availableVouchers, int previousVouchers) {\r\n        this.userId = userId;\r\n        this.username = username;\r\n        this.role = role;\r\n        this.createdAt = createdAt;\r\n        this.availableVouchers = availableVouchers;\r\n        this.previousVouchers = previousVouchers;\r\n    }\r\n\r\n    public static List<String> getRedeemedVouchers(Context context) {\r\n        SharedPreferences sharedPreferences = context.getSharedPreferences(\"UserProfile\", Context.MODE_PRIVATE);\r\n        String redeemedVouchers = sharedPreferences.getString(\"redeemedVouchers\", \"\");\r\n\r\n        if (redeemedVouchers.isEmpty()) {\r\n            return new ArrayList<>();\r\n        }\r\n        return new ArrayList<>(Arrays.asList(redeemedVouchers.split(\";\")));\r\n    }\r\n\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public String getUserId() {\r\n        return userId;\r\n    }\r\n\r\n    public void setUserId(String userId) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public String getRole() {\r\n        return role;\r\n    }\r\n\r\n    public void setRole(String role) {\r\n        this.role = role;\r\n    }\r\n\r\n    public String getCreatedAt() {\r\n        return createdAt;\r\n    }\r\n\r\n    public void setCreatedAt(String createdAt) {\r\n        this.createdAt = createdAt;\r\n    }\r\n\r\n    public int getAvailableVouchers() {\r\n        return availableVouchers;\r\n    }\r\n\r\n    public void setAvailableVouchers(int availableVouchers) {this.availableVouchers = availableVouchers;}\r\n\r\n    public int getPreviousVouchers() {\r\n        return previousVouchers;\r\n    }\r\n\r\n    public void setPreviousVouchers(int previousVouchers) {this.previousVouchers = previousVouchers;}\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/wowcher/classes/User.java b/app/src/main/java/com/example/wowcher/classes/User.java
---- a/app/src/main/java/com/example/wowcher/classes/User.java	(revision b288ddd121fdf5e42fe17d6af8320d79714fc2b8)
-+++ b/app/src/main/java/com/example/wowcher/classes/User.java	(date 1743499981387)
-@@ -15,12 +15,6 @@
- 
- @RequiresApi(api = Build.VERSION_CODES.O)
- public class User {
--    private int userId;
--    private String username;
--    private String role;
--    private String createdAt;
--    private int availableVouchers;
--    private int previousVouchers;
- 
-     //primary key
-     public String userId= "";
-@@ -35,7 +29,6 @@
-     public User(){}
- 
- 
--    public User(int userId, String username, String role, String createdAt, int availableVouchers, int previousVouchers) {
-     //User constructor
-     public User(String userId, String username, String role, String createdAt, int availableVouchers, int previousVouchers) {
-         this.userId = userId;
-Index: app/src/main/java/com/example/wowcher/Map.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.wowcher;\r\n\r\nimport androidx.activity.result.ActivityResultLauncher;\r\nimport androidx.activity.result.contract.ActivityResultContracts;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport com.google.android.gms.location.FusedLocationProviderClient;\r\nimport com.google.android.gms.location.LocationRequest;\r\nimport com.google.android.gms.location.LocationServices;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.CameraPosition;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.libraries.places.api.Places;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Context;\r\nimport android.content.pm.ApplicationInfo;\r\nimport android.content.pm.PackageManager;\r\nimport android.location.Address;\r\nimport android.location.Geocoder;\r\nimport android.location.Location;\r\nimport android.location.LocationManager;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.widget.Toast;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\n\r\npublic class Map extends AppCompatActivity implements OnMapReadyCallback {\r\n    //get access to location permission\r\n    final private int REQUEST_CODE_ASK_PERMISSIONS = 123;\r\n    private GoogleMap mMap;\r\n\r\n    FusedLocationProviderClient fusedLocationProviderClient;\r\n\r\n    private CameraPosition cameraPosition;\r\n    private LatLng userLocation;\r\n    private LatLng selectedLocation;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.google_maps_test);\r\n\r\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);\r\n        if (mapFragment != null) {\r\n            mapFragment.getMapAsync(this);\r\n        }\r\n\r\n        fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this);\r\n\r\n        // Retrieve API key for initialize Places to get data of places\r\n        String apiKey = getApiKeyFromManifest(this);\r\n        if (!Places.isInitialized() && apiKey != null) {\r\n            Places.initialize(this, apiKey);\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onMapReady(@NonNull GoogleMap googleMap) {\r\n        mMap = googleMap;\r\n\r\n        // Check for location permissions\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            // If don't have, request for permissions\r\n            requestPermissions(new String[]{\r\n                    android.Manifest.permission.ACCESS_FINE_LOCATION,\r\n                    Manifest.permission.ACCESS_COARSE_LOCATION\r\n            }, REQUEST_CODE_ASK_PERMISSIONS);\r\n        } else {\r\n            // Otherwise, retrieve current user location\r\n            fetchUserLocation(this, fusedLocationProviderClient);\r\n        }\r\n\r\n    }\r\n\r\n    // Function to fetch the user's location\r\n    public void fetchUserLocation(Context context, FusedLocationProviderClient fusedLocationClient) {\r\n        // Check if the location permission is granted\r\n        if (ContextCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\r\n            try {\r\n                // Fetch the last known location\r\n                fusedLocationClient.getLastLocation().addOnSuccessListener(location -> {\r\n                    if (location != null) {\r\n                        // Update the user's location in the state\r\n                        userLocation = new LatLng(location.getLatitude(), location.getLongitude());\r\n\r\n                        // Initialize camera position of user location\r\n                        cameraPosition = CameraPosition.fromLatLngZoom(userLocation, 20f);\r\n\r\n                        // Move camera to user location\r\n                        mMap.moveCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));\r\n\r\n                        // Add marker to user location\r\n                        mMap.addMarker(\r\n                                new MarkerOptions()\r\n                                        .position(userLocation)\r\n\r\n                        );\r\n\r\n                        // Enable necessary map functions\r\n                        enableMapsSettings();\r\n                    } else {\r\n                        System.out.println(\"didnt get location\");\r\n                    }\r\n                });\r\n            } catch (SecurityException e) {\r\n                Log.e(\"Location Error\", \"Permission for location access was revoked: \" + e.getLocalizedMessage());\r\n            }\r\n        } else {\r\n            Log.e(\"Location Error\", \"Location permission is not granted.\");\r\n        }\r\n    }\r\n\r\n    // Handles selected place from the search results - TODO\r\n    public void selectLocation(String selectedPlace, Context context){\r\n        Geocoder geocoder = new Geocoder(context);\r\n        try {\r\n            List<Address> addressList = geocoder.getFromLocationName(selectedPlace, 1);\r\n            if(!addressList.isEmpty()){\r\n                Address address = addressList.get(0);\r\n                selectedLocation = new LatLng(address.getLatitude(), address.getLongitude());\r\n            }else{\r\n                Toast.makeText(this, \"No location found for the selected place.\", Toast.LENGTH_LONG)\r\n                        .show();\r\n            }\r\n        }catch(IOException e){\r\n            Log.e(\"Get addresses fail\", \"Error: \"+e);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    // Suppressed permission check since this will only be used after permission is checked\r\n    @SuppressLint(\"MissingPermission\")\r\n    public void enableMapsSettings() {\r\n        // Enable maps functions\r\n        mMap.setMyLocationEnabled(true);\r\n        mMap.getUiSettings().setZoomControlsEnabled(true);\r\n\r\n    }\r\n\r\n    // Handles after requesting for permissions\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        switch (requestCode) {\r\n            case REQUEST_CODE_ASK_PERMISSIONS:\r\n                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                    // Permission Granted\r\n                    // Retrieve user location\r\n                    fetchUserLocation(this, fusedLocationProviderClient);\r\n                } else {\r\n                    // Permission Denied\r\n                    Toast.makeText(this, \"Location Permission Denied\", Toast.LENGTH_SHORT)\r\n                            .show();\r\n                }\r\n                break;\r\n            default:\r\n                super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        }\r\n    }\r\n\r\n    // Retrieve API key\r\n    public static String getApiKeyFromManifest(Context context) {\r\n        try {\r\n            ApplicationInfo applicationInfo = context.getPackageManager().getApplicationInfo(context.getPackageName(), PackageManager.GET_META_DATA);\r\n            Bundle bundle = applicationInfo.metaData;\r\n            return bundle.getString(\"com.google.android.geo.API_KEY\");\r\n        } catch (PackageManager.NameNotFoundException e) {\r\n            Log.e(\"API key retrieval failed\", \"Error: \" + e);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/wowcher/Map.java b/app/src/main/java/com/example/wowcher/Map.java
---- a/app/src/main/java/com/example/wowcher/Map.java	(revision b288ddd121fdf5e42fe17d6af8320d79714fc2b8)
-+++ b/app/src/main/java/com/example/wowcher/Map.java	(date 1743580264340)
-@@ -1,187 +1,188 @@
--package com.example.wowcher;
--
--import androidx.activity.result.ActivityResultLauncher;
--import androidx.activity.result.contract.ActivityResultContracts;
--import androidx.annotation.NonNull;
--import androidx.appcompat.app.AppCompatActivity;
--import androidx.core.app.ActivityCompat;
--import androidx.core.content.ContextCompat;
--
--import com.google.android.gms.location.FusedLocationProviderClient;
--import com.google.android.gms.location.LocationRequest;
--import com.google.android.gms.location.LocationServices;
--import com.google.android.gms.maps.CameraUpdateFactory;
--import com.google.android.gms.maps.GoogleMap;
--import com.google.android.gms.maps.OnMapReadyCallback;
--import com.google.android.gms.maps.SupportMapFragment;
--import com.google.android.gms.maps.model.CameraPosition;
--import com.google.android.gms.maps.model.LatLng;
--import com.google.android.gms.maps.model.MarkerOptions;
--import com.google.android.gms.tasks.OnSuccessListener;
--import com.google.android.libraries.places.api.Places;
--
--import android.Manifest;
--import android.annotation.SuppressLint;
--import android.content.Context;
--import android.content.pm.ApplicationInfo;
--import android.content.pm.PackageManager;
--import android.location.Address;
--import android.location.Geocoder;
--import android.location.Location;
--import android.location.LocationManager;
--import android.os.Build;
--import android.os.Bundle;
--import android.util.Log;
--import android.widget.Toast;
--
--import java.io.IOException;
--import java.util.List;
--
--
--public class Map extends AppCompatActivity implements OnMapReadyCallback {
--    //get access to location permission
--    final private int REQUEST_CODE_ASK_PERMISSIONS = 123;
--    private GoogleMap mMap;
--
--    FusedLocationProviderClient fusedLocationProviderClient;
--
--    private CameraPosition cameraPosition;
--    private LatLng userLocation;
--    private LatLng selectedLocation;
--
--    @Override
--    protected void onCreate(Bundle savedInstanceState) {
--        super.onCreate(savedInstanceState);
--        setContentView(R.layout.google_maps_test);
--
--        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);
--        if (mapFragment != null) {
--            mapFragment.getMapAsync(this);
--        }
--
--        fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this);
--
--        // Retrieve API key for initialize Places to get data of places
--        String apiKey = getApiKeyFromManifest(this);
--        if (!Places.isInitialized() && apiKey != null) {
--            Places.initialize(this, apiKey);
--        }
--
--    }
--
--    @Override
--    public void onMapReady(@NonNull GoogleMap googleMap) {
--        mMap = googleMap;
--
--        // Check for location permissions
--        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
--            // If don't have, request for permissions
--            requestPermissions(new String[]{
--                    android.Manifest.permission.ACCESS_FINE_LOCATION,
--                    Manifest.permission.ACCESS_COARSE_LOCATION
--            }, REQUEST_CODE_ASK_PERMISSIONS);
--        } else {
--            // Otherwise, retrieve current user location
--            fetchUserLocation(this, fusedLocationProviderClient);
--        }
--
--    }
--
--    // Function to fetch the user's location
--    public void fetchUserLocation(Context context, FusedLocationProviderClient fusedLocationClient) {
--        // Check if the location permission is granted
--        if (ContextCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
--            try {
--                // Fetch the last known location
--                fusedLocationClient.getLastLocation().addOnSuccessListener(location -> {
--                    if (location != null) {
--                        // Update the user's location in the state
--                        userLocation = new LatLng(location.getLatitude(), location.getLongitude());
--
--                        // Initialize camera position of user location
--                        cameraPosition = CameraPosition.fromLatLngZoom(userLocation, 20f);
--
--                        // Move camera to user location
--                        mMap.moveCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));
--
--                        // Add marker to user location
--                        mMap.addMarker(
--                                new MarkerOptions()
--                                        .position(userLocation)
--
--                        );
--
--                        // Enable necessary map functions
--                        enableMapsSettings();
--                    } else {
--                        System.out.println("didnt get location");
--                    }
--                });
--            } catch (SecurityException e) {
--                Log.e("Location Error", "Permission for location access was revoked: " + e.getLocalizedMessage());
--            }
--        } else {
--            Log.e("Location Error", "Location permission is not granted.");
--        }
--    }
--
--    // Handles selected place from the search results - TODO
--    public void selectLocation(String selectedPlace, Context context){
--        Geocoder geocoder = new Geocoder(context);
--        try {
--            List<Address> addressList = geocoder.getFromLocationName(selectedPlace, 1);
--            if(!addressList.isEmpty()){
--                Address address = addressList.get(0);
--                selectedLocation = new LatLng(address.getLatitude(), address.getLongitude());
--            }else{
--                Toast.makeText(this, "No location found for the selected place.", Toast.LENGTH_LONG)
--                        .show();
--            }
--        }catch(IOException e){
--            Log.e("Get addresses fail", "Error: "+e);
--        }
--
--
--    }
--
--    // Suppressed permission check since this will only be used after permission is checked
--    @SuppressLint("MissingPermission")
--    public void enableMapsSettings() {
--        // Enable maps functions
--        mMap.setMyLocationEnabled(true);
--        mMap.getUiSettings().setZoomControlsEnabled(true);
--
--    }
--
--    // Handles after requesting for permissions
--    @Override
--    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
--        switch (requestCode) {
--            case REQUEST_CODE_ASK_PERMISSIONS:
--                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
--                    // Permission Granted
--                    // Retrieve user location
--                    fetchUserLocation(this, fusedLocationProviderClient);
--                } else {
--                    // Permission Denied
--                    Toast.makeText(this, "Location Permission Denied", Toast.LENGTH_SHORT)
--                            .show();
--                }
--                break;
--            default:
--                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
--        }
--    }
--
--    // Retrieve API key
--    public static String getApiKeyFromManifest(Context context) {
--        try {
--            ApplicationInfo applicationInfo = context.getPackageManager().getApplicationInfo(context.getPackageName(), PackageManager.GET_META_DATA);
--            Bundle bundle = applicationInfo.metaData;
--            return bundle.getString("com.google.android.geo.API_KEY");
--        } catch (PackageManager.NameNotFoundException e) {
--            Log.e("API key retrieval failed", "Error: " + e);
--            return null;
--        }
--    }
--}
-+//package com.example.wowcher;
-+//
-+//import androidx.activity.result.ActivityResultLauncher;
-+//import androidx.activity.result.contract.ActivityResultContracts;
-+//import androidx.annotation.NonNull;
-+//import androidx.appcompat.app.AppCompatActivity;
-+//import androidx.core.app.ActivityCompat;
-+//import androidx.core.content.ContextCompat;
-+//
-+//import com.google.android.gms.location.FusedLocationProviderClient;
-+//import com.google.android.gms.location.FusedLocationProviderClient;
-+//import com.google.android.gms.location.LocationRequest;
-+//import com.google.android.gms.location.LocationServices;
-+//import com.google.android.gms.maps.CameraUpdateFactory;
-+//import com.google.android.gms.maps.GoogleMap;
-+//import com.google.android.gms.maps.OnMapReadyCallback;
-+//import com.google.android.gms.maps.SupportMapFragment;
-+//import com.google.android.gms.maps.model.CameraPosition;
-+//import com.google.android.gms.maps.model.LatLng;
-+//import com.google.android.gms.maps.model.MarkerOptions;
-+//import com.google.android.gms.tasks.OnSuccessListener;
-+//import com.google.android.libraries.places.api.Places;
-+//
-+//import android.Manifest;
-+//import android.annotation.SuppressLint;
-+//import android.content.Context;
-+//import android.content.pm.ApplicationInfo;
-+//import android.content.pm.PackageManager;
-+//import android.location.Address;
-+//import android.location.Geocoder;
-+//import android.location.Location;
-+//import android.location.LocationManager;
-+//import android.os.Build;
-+//import android.os.Bundle;
-+//import android.util.Log;
-+//import android.widget.Toast;
-+//
-+//import java.io.IOException;
-+//import java.util.List;
-+//
-+//
-+//public class Map extends AppCompatActivity implements OnMapReadyCallback {
-+//    //get access to location permission
-+//    final private int REQUEST_CODE_ASK_PERMISSIONS = 123;
-+//    private GoogleMap mMap;
-+//
-+//    FusedLocationProviderClient fusedLocationProviderClient;
-+//
-+//    private CameraPosition cameraPosition;
-+//    private LatLng userLocation;
-+//    private LatLng selectedLocation;
-+//
-+//    @Override
-+//    protected void onCreate(Bundle savedInstanceState) {
-+//        super.onCreate(savedInstanceState);
-+//        setContentView(R.layout.google_maps_test);
-+//
-+//        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);
-+//        if (mapFragment != null) {
-+//            mapFragment.getMapAsync(this);
-+//        }
-+//
-+//        fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this);
-+//
-+//        // Retrieve API key for initialize Places to get data of places
-+//        String apiKey = getApiKeyFromManifest(this);
-+//        if (!Places.isInitialized() && apiKey != null) {
-+//            Places.initialize(this, apiKey);
-+//        }
-+//
-+//    }
-+//
-+//    @Override
-+//    public void onMapReady(@NonNull GoogleMap googleMap) {
-+//        mMap = googleMap;
-+//
-+//        // Check for location permissions
-+//        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
-+//            // If don't have, request for permissions
-+//            requestPermissions(new String[]{
-+//                    android.Manifest.permission.ACCESS_FINE_LOCATION,
-+//                    Manifest.permission.ACCESS_COARSE_LOCATION
-+//            }, REQUEST_CODE_ASK_PERMISSIONS);
-+//        } else {
-+//            // Otherwise, retrieve current user location
-+//            fetchUserLocation(this, fusedLocationProviderClient);
-+//        }
-+//
-+//    }
-+//
-+//    // Function to fetch the user's location
-+//    public void fetchUserLocation(Context context, FusedLocationProviderClient fusedLocationClient) {
-+//        // Check if the location permission is granted
-+//        if (ContextCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
-+//            try {
-+//                // Fetch the last known location
-+//                fusedLocationClient.getLastLocation().addOnSuccessListener(location -> {
-+//                    if (location != null) {
-+//                        // Update the user's location in the state
-+//                        userLocation = new LatLng(location.getLatitude(), location.getLongitude());
-+//
-+//                        // Initialize camera position of user location
-+//                        cameraPosition = CameraPosition.fromLatLngZoom(userLocation, 20f);
-+//
-+//                        // Move camera to user location
-+//                        mMap.moveCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));
-+//
-+//                        // Add marker to user location
-+//                        mMap.addMarker(
-+//                                new MarkerOptions()
-+//                                        .position(userLocation)
-+//
-+//                        );
-+//
-+//                        // Enable necessary map functions
-+//                        enableMapsSettings();
-+//                    } else {
-+//                        System.out.println("didnt get location");
-+//                    }
-+//                });
-+//            } catch (SecurityException e) {
-+//                Log.e("Location Error", "Permission for location access was revoked: " + e.getLocalizedMessage());
-+//            }
-+//        } else {
-+//            Log.e("Location Error", "Location permission is not granted.");
-+//        }
-+//    }
-+//
-+//    // Handles selected place from the search results - TODO
-+//    public void selectLocation(String selectedPlace, Context context){
-+//        Geocoder geocoder = new Geocoder(context);
-+//        try {
-+//            List<Address> addressList = geocoder.getFromLocationName(selectedPlace, 1);
-+//            if(!addressList.isEmpty()){
-+//                Address address = addressList.get(0);
-+//                selectedLocation = new LatLng(address.getLatitude(), address.getLongitude());
-+//            }else{
-+//                Toast.makeText(this, "No location found for the selected place.", Toast.LENGTH_LONG)
-+//                        .show();
-+//            }
-+//        }catch(IOException e){
-+//            Log.e("Get addresses fail", "Error: "+e);
-+//        }
-+//
-+//
-+//    }
-+//
-+//    // Suppressed permission check since this will only be used after permission is checked
-+//    @SuppressLint("MissingPermission")
-+//    public void enableMapsSettings() {
-+//        // Enable maps functions
-+//        mMap.setMyLocationEnabled(true);
-+//        mMap.getUiSettings().setZoomControlsEnabled(true);
-+//
-+//    }
-+//
-+//    // Handles after requesting for permissions
-+//    @Override
-+//    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
-+//        switch (requestCode) {
-+//            case REQUEST_CODE_ASK_PERMISSIONS:
-+//                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
-+//                    // Permission Granted
-+//                    // Retrieve user location
-+//                    fetchUserLocation(this, fusedLocationProviderClient);
-+//                } else {
-+//                    // Permission Denied
-+//                    Toast.makeText(this, "Location Permission Denied", Toast.LENGTH_SHORT)
-+//                            .show();
-+//                }
-+//                break;
-+//            default:
-+//                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
-+//        }
-+//    }
-+//
-+//    // Retrieve API key
-+//    public static String getApiKeyFromManifest(Context context) {
-+//        try {
-+//            ApplicationInfo applicationInfo = context.getPackageManager().getApplicationInfo(context.getPackageName(), PackageManager.GET_META_DATA);
-+//            Bundle bundle = applicationInfo.metaData;
-+//            return bundle.getString("com.google.android.geo.API_KEY");
-+//        } catch (PackageManager.NameNotFoundException e) {
-+//            Log.e("API key retrieval failed", "Error: " + e);
-+//            return null;
-+//        }
-+//    }
-+//}
-Index: app/build.gradle.kts
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>plugins {\r\n    alias(libs.plugins.android.application)\r\n    alias(libs.plugins.google.gms.google.services)\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.example.wowcher\"\r\n    compileSdk = 35\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.example.wowcher\"\r\n        minSdk = 24\r\n        targetSdk = 35\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_11\r\n        targetCompatibility = JavaVersion.VERSION_11\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation(libs.appcompat)\r\n    implementation(libs.material)\r\n    implementation(libs.activity)\r\n    implementation(libs.constraintlayout)\r\n    implementation(libs.firebase.database)\r\n    implementation(libs.play.services.location)\r\n    testImplementation(libs.junit)\r\n    androidTestImplementation(libs.ext.junit)\r\n    androidTestImplementation(libs.espresso.core)\r\n    implementation(libs.play.services.maps)\r\n    implementation(libs.places)\r\n    implementation(\"com.google.android.gms:play-services-maps:19.1.0\")\r\n    implementation(\"com.google.android.material:material:1.12.0\")\r\n    implementation(\"org.jetbrains.kotlin:kotlin-stdlib:1.8.22\")\r\n    implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.22\")\r\n\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/build.gradle.kts b/app/build.gradle.kts
---- a/app/build.gradle.kts	(revision b288ddd121fdf5e42fe17d6af8320d79714fc2b8)
-+++ b/app/build.gradle.kts	(date 1743579637740)
-@@ -49,5 +49,16 @@
-     implementation("com.google.android.material:material:1.12.0")
-     implementation("org.jetbrains.kotlin:kotlin-stdlib:1.8.22")
-     implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.22")
-+    implementation(platform(libs.firebase.bom))
-+    implementation(libs.appcompat)
-+    implementation(libs.material)
-+    implementation(libs.activity)
-+    implementation(libs.constraintlayout)
-+    implementation(libs.firebase.database)
-+    implementation(libs.firebase.firestore)
-+    testImplementation(libs.junit)
-+    androidTestImplementation(libs.ext.junit)
-+    androidTestImplementation(libs.espresso.core)
-+    implementation(libs.firebase.analytics)
- 
- }
-Index: gradle/libs.versions.toml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>[versions]\r\nagp = \"8.9.0\"\r\njunit = \"4.13.2\"\r\njunitVersion = \"1.1.5\"\r\nespressoCore = \"3.5.1\"\r\nappcompat = \"1.6.1\"\r\nmaterial = \"1.10.0\"\r\nactivity = \"1.8.0\"\r\nconstraintlayout = \"2.1.4\"\r\ngoogleGmsGoogleServices = \"4.4.2\"\r\nfirebaseDatabase = \"21.0.0\"\r\n\r\n[libraries]\r\njunit = { group = \"junit\", name = \"junit\", version.ref = \"junit\" }\r\next-junit = { group = \"androidx.test.ext\", name = \"junit\", version.ref = \"junitVersion\" }\r\nespresso-core = { group = \"androidx.test.espresso\", name = \"espresso-core\", version.ref = \"espressoCore\" }\r\nappcompat = { group = \"androidx.appcompat\", name = \"appcompat\", version.ref = \"appcompat\" }\r\nmaterial = { group = \"com.google.android.material\", name = \"material\", version.ref = \"material\" }\r\nactivity = { group = \"androidx.activity\", name = \"activity\", version.ref = \"activity\" }\r\nconstraintlayout = { group = \"androidx.constraintlayout\", name = \"constraintlayout\", version.ref = \"constraintlayout\" }\r\nfirebase-database = { group = \"com.google.firebase\", name = \"firebase-database\", version.ref = \"firebaseDatabase\" }\r\n\r\n[plugins]\r\nandroid-application = { id = \"com.android.application\", version.ref = \"agp\" }\r\ngoogle-gms-google-services = { id = \"com.google.gms.google-services\", version.ref = \"googleGmsGoogleServices\" }\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
---- a/gradle/libs.versions.toml	(revision b288ddd121fdf5e42fe17d6af8320d79714fc2b8)
-+++ b/gradle/libs.versions.toml	(date 1743508158980)
-@@ -9,8 +9,18 @@
- constraintlayout = "2.1.4"
- googleGmsGoogleServices = "4.4.2"
- firebaseDatabase = "21.0.0"
-+firebaseBom = "32.7.0"
-+play-services-maps = "19.1.0"
-+play-services-location = "21.0.1"
-+places = "3.5.0"
-+firebaseFirestore = "25.1.2"
- 
- [libraries]
-+play-services-maps = { module = "com.google.android.gms:play-services-maps", version.ref = "play-services-maps" }
-+play-services-location = { module = "com.google.android.gms:play-services-location", version.ref = "play-services-location" }
-+places = { module = "com.google.android.libraries.places:places", version.ref = "places" }
-+firebase-analytics = { module = "com.google.firebase:firebase-analytics" }
-+firebase-bom = { module = "com.google.firebase:firebase-bom", version.ref = "firebaseBom" }
- junit = { group = "junit", name = "junit", version.ref = "junit" }
- ext-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
- espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
-@@ -19,6 +29,7 @@
- activity = { group = "androidx.activity", name = "activity", version.ref = "activity" }
- constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "constraintlayout" }
- firebase-database = { group = "com.google.firebase", name = "firebase-database", version.ref = "firebaseDatabase" }
-+firebase-firestore = { group = "com.google.firebase", name = "firebase-firestore", version.ref = "firebaseFirestore" }
- 
- [plugins]
- android-application = { id = "com.android.application", version.ref = "agp" }
-Index: settings.gradle.kts
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>pluginManagement {\r\n    repositories {\r\n        google {\r\n            content {\r\n                includeGroupByRegex(\"com\\\\.android.*\")\r\n                includeGroupByRegex(\"com\\\\.google.*\")\r\n                includeGroupByRegex(\"androidx.*\")\r\n            }\r\n        }\r\n        mavenCentral()\r\n        gradlePluginPortal()\r\n    }\r\n}\r\ndependencyResolutionManagement {\r\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n    }\r\n}\r\n\r\nrootProject.name = \"WOWcher\"\r\ninclude(\":app\")\r\n 
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/settings.gradle.kts b/settings.gradle.kts
---- a/settings.gradle.kts	(revision b288ddd121fdf5e42fe17d6af8320d79714fc2b8)
-+++ b/settings.gradle.kts	(date 1743507940078)
-@@ -19,6 +19,7 @@
-     }
- }
- 
-+
- rootProject.name = "WOWcher"
- include(":app")
-  
-\ No newline at end of file
-Index: app/src/main/java/com/example/wowcher/MapsMarkerActivity.java
-===================================================================
-diff --git a/app/src/main/java/com/example/wowcher/MapsMarkerActivity.java b/app/src/main/java/com/example/wowcher/MapsMarkerActivity.java
-deleted file mode 100644
---- a/app/src/main/java/com/example/wowcher/MapsMarkerActivity.java	(revision b288ddd121fdf5e42fe17d6af8320d79714fc2b8)
-+++ /dev/null	(revision b288ddd121fdf5e42fe17d6af8320d79714fc2b8)
-@@ -1,78 +0,0 @@
--// Copyright 2020 Google LLC
--//
--// Licensed under the Apache License, Version 2.0 (the "License");
--// you may not use this file except in compliance with the License.
--// You may obtain a copy of the License at
--//
--//      http://www.apache.org/licenses/LICENSE-2.0
--//
--// Unless required by applicable law or agreed to in writing, software
--// distributed under the License is distributed on an "AS IS" BASIS,
--// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--// See the License for the specific language governing permissions and
--// limitations under the License.
--
--package com.example.wowcher;
--
--import android.os.Bundle;
--import androidx.appcompat.app.AppCompatActivity;
--
--import com.google.android.gms.maps.CameraUpdateFactory;
--import com.google.android.gms.maps.GoogleMap;
--import com.google.android.gms.maps.OnMapReadyCallback;
--import com.google.android.gms.maps.SupportMapFragment;
--import com.google.android.gms.maps.model.LatLng;
--import com.google.android.gms.maps.model.MarkerOptions;
--
--/**
-- * An activity that displays a Google map with a marker (pin) to indicate a particular location.
-- */
--// [START maps_marker_on_map_ready]
--public class MapsMarkerActivity extends AppCompatActivity
--        implements OnMapReadyCallback {
--
--    // [START_EXCLUDE]
--    // [START maps_marker_get_map_async]
--    @Override
--    protected void onCreate(Bundle savedInstanceState) {
--        super.onCreate(savedInstanceState);
--        // Retrieve the content view that renders the map.
--        setContentView(R.layout.activity_maps);
--
--        // Get the SupportMapFragment and request notification when the map is ready to be used.
--        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
--                .findFragmentById(R.id.map);
--        mapFragment.getMapAsync(this);
--    }
--    // [END maps_marker_get_map_async]
--    // [END_EXCLUDE]
--
--    // [START_EXCLUDE silent]
--    /**
--     * Manipulates the map when it's available.
--     * The API invokes this callback when the map is ready to be used.
--     * This is where we can add markers or lines, add listeners or move the camera. In this case,
--     * we just add a marker near Sydney, Australia.
--     * If Google Play services is not installed on the device, the user receives a prompt to install
--     * Play services inside the SupportMapFragment. The API invokes this method after the user has
--     * installed Google Play services and returned to the app.
--     */
--    // [END_EXCLUDE]
--    // [START maps_marker_on_map_ready_add_marker]
--    @Override
--    public void onMapReady(GoogleMap googleMap) {
--        // [START_EXCLUDE silent]
--        // Add a marker in Sydney, Australia,
--        // and move the map's camera to the same location.
--        // [END_EXCLUDE]
--        LatLng sydney = new LatLng(-33.852, 151.211);
--        googleMap.addMarker(new MarkerOptions()
--                .position(sydney)
--                .title("Marker in Sydney"));
--        // [START_EXCLUDE silent]
--        googleMap.moveCamera(CameraUpdateFactory.newLatLng(sydney));
--        // [END_EXCLUDE]
--    }
--    // [END maps_marker_on_map_ready_add_marker]
--}
--// [END maps_marker_on_map_ready]
-Index: .idea/gradle.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"CHOOSE_PER_TEST\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"#GRADLE_LOCAL_JAVA_HOME\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveExternalAnnotations\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/gradle.xml b/.idea/gradle.xml
---- a/.idea/gradle.xml	(revision b288ddd121fdf5e42fe17d6af8320d79714fc2b8)
-+++ b/.idea/gradle.xml	(date 1743579106011)
-@@ -13,7 +13,6 @@
-             <option value="$PROJECT_DIR$/app" />
-           </set>
-         </option>
--        <option name="resolveExternalAnnotations" value="false" />
-       </GradleProjectSettings>
-     </option>
-   </component>
-Index: app/google-services.json
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>{\r\n  \"project_info\": {\r\n    \"project_number\": \"302527014877\",\r\n    \"project_id\": \"isp1d-1f66f\",\r\n    \"storage_bucket\": \"isp1d-1f66f.firebasestorage.app\"\r\n  },\r\n  \"client\": [\r\n    {\r\n      \"client_info\": {\r\n        \"mobilesdk_app_id\": \"1:302527014877:android:ce5e7798e5abab3fb9f834\",\r\n        \"android_client_info\": {\r\n          \"package_name\": \"com.example.wowcher\"\r\n        }\r\n      },\r\n      \"oauth_client\": [],\r\n      \"api_key\": [\r\n        {\r\n          \"current_key\": \"INSERT API KEY HERE\"\r\n        }\r\n      ],\r\n      \"services\": {\r\n        \"appinvite_service\": {\r\n          \"other_platform_oauth_client\": []\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"configuration_version\": \"1\"\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/google-services.json b/app/google-services.json
---- a/app/google-services.json	(revision b288ddd121fdf5e42fe17d6af8320d79714fc2b8)
-+++ b/app/google-services.json	(date 1743508585046)
-@@ -15,7 +15,7 @@
-       "oauth_client": [],
-       "api_key": [
-         {
--          "current_key": "INSERT API KEY HERE"
-+          "current_key": "AIzaSyD7fDxM4T4f2jWmFUt-3dhP-9VYUOi1ozA"
-         }
-       ],
-       "services": {
-Index: .idea/appInsightsSettings.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/appInsightsSettings.xml b/.idea/appInsightsSettings.xml
-new file mode 100644
---- /dev/null	(date 1743578311632)
-+++ b/.idea/appInsightsSettings.xml	(date 1743578311632)
-@@ -0,0 +1,6 @@
-+<?xml version="1.0" encoding="UTF-8"?>
-+<project version="4">
-+  <component name="AppInsightsSettings">
-+    <option name="selectedTabId" value="Firebase Crashlytics" />
-+  </component>
-+</project>
-\ No newline at end of file
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetSelector\">\r\n    <selectionStates>\r\n      <SelectionState runConfigName=\"app\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n        <DropdownSelection timestamp=\"2025-04-04T09:07:16.277744100Z\">\r\n          <Target type=\"DEFAULT_BOOT\">\r\n            <handle>\r\n              <DeviceId pluginId=\"LocalEmulator\" identifier=\"path=C:\\Users\\Michael Rasco\\.android\\avd\\Pixel_5_API_30.avd\" />\r\n            </handle>\r\n          </Target>\r\n        </DropdownSelection>\r\n        <DialogSelection />\r\n      </SelectionState>\r\n    </selectionStates>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
--- a/.idea/deploymentTargetSelector.xml	(revision 367e14383b2879db95787499e599d137333c8c72)
+++ b/.idea/deploymentTargetSelector.xml	(date 1744101847081)
@@ -4,10 +4,10 @@
     <selectionStates>
       <SelectionState runConfigName="app">
         <option name="selectionMode" value="DROPDOWN" />
-        <DropdownSelection timestamp="2025-04-04T09:07:16.277744100Z">
+        <DropdownSelection timestamp="2025-04-08T08:43:40.506607600Z">
           <Target type="DEFAULT_BOOT">
             <handle>
-              <DeviceId pluginId="LocalEmulator" identifier="path=C:\Users\Michael Rasco\.android\avd\Pixel_5_API_30.avd" />
+              <DeviceId pluginId="LocalEmulator" identifier="path=C:\Users\geoff\.android\avd\Medium_Phone.avd" />
             </handle>
           </Target>
         </DropdownSelection>
Index: app/src/main/java/com/example/wowcher/Register.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.wowcher;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.text.TextUtils;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Toast;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.auth.AuthResult;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.firestore.DocumentReference;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class Register extends AppCompatActivity {\r\n    private EditText nameField, emailField, passwordField, confirmPasswordField, mobileField;\r\n    private Button registerButton;\r\n\r\n    private FirebaseAuth mAuth;\r\n    private FirebaseFirestore fstore;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_registration);\r\n\r\n        // Initialize Firebase Authentication and Firestore\r\n        mAuth = FirebaseAuth.getInstance();\r\n        fstore = FirebaseFirestore.getInstance();\r\n\r\n        nameField = findViewById(R.id.name);\r\n        emailField = findViewById(R.id.email);\r\n        passwordField = findViewById(R.id.password);\r\n        confirmPasswordField = findViewById(R.id.confirmPassword);\r\n        mobileField = findViewById(R.id.mobile);\r\n        registerButton = findViewById(R.id.registerButton);\r\n\r\n        registerButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                registerUser();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void registerUser() {\r\n        String name = nameField.getText().toString().trim();\r\n        String email = emailField.getText().toString().trim();\r\n        String password = passwordField.getText().toString().trim();\r\n        String confirmPassword = confirmPasswordField.getText().toString().trim();\r\n        String mobile = mobileField.getText().toString().trim();\r\n\r\n        if (TextUtils.isEmpty(name) || TextUtils.isEmpty(email) || TextUtils.isEmpty(password) ||\r\n                TextUtils.isEmpty(confirmPassword) || TextUtils.isEmpty(mobile)) {\r\n            Toast.makeText(this, \"Please enter all fields\", Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n\r\n        if (!password.equals(confirmPassword)) {\r\n            Toast.makeText(this, \"Passwords do not match\", Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n\r\n        mAuth.createUserWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<AuthResult> task) {\r\n                        if (task.isSuccessful()) {\r\n                            FirebaseUser firebaseUser = mAuth.getCurrentUser();\r\n                            if (firebaseUser != null) {\r\n                                String userID = firebaseUser.getUid();\r\n\r\n                                DocumentReference documentReference = fstore.collection(\"users\").document(userID);\r\n                                Map<String, Object> user = new HashMap<>();\r\n                                user.put(\"username\", name);\r\n                                user.put(\"email\", email);\r\n                                user.put(\"mobileNumber\", mobile);\r\n                                user.put(\"role\", \"User\");\r\n                                user.put(\"tier\", \"Bronze\");\r\n                                user.put(\"points\", 0);\r\n                                user.put(\"createdAt\", LocalDateTime.now().toString());\r\n                                user.put(\"availableVouchers\", new ArrayList<String>());\r\n                                user.put(\"previousVouchers\", new ArrayList<String>());\r\n                                user.put(\"password\", password);\r\n\r\n                                documentReference.set(user).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                                    @Override\r\n                                    public void onSuccess(Void unused) {\r\n                                        Toast.makeText(Register.this, \"User registered successfully!\", Toast.LENGTH_SHORT).show();\r\n                                    }\r\n                                });\r\n\r\n                                Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n                                startActivity(intent);\r\n                                finish();\r\n                            }\r\n                        } else {\r\n                            Toast.makeText(Register.this, \"Authentication failed.\", Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/wowcher/Register.java b/app/src/main/java/com/example/wowcher/Register.java
--- a/app/src/main/java/com/example/wowcher/Register.java	(revision 367e14383b2879db95787499e599d137333c8c72)
+++ b/app/src/main/java/com/example/wowcher/Register.java	(date 1744103759593)
@@ -1,6 +1,7 @@
 package com.example.wowcher;
 
 import android.content.Intent;
+import android.os.Build;
 import android.os.Bundle;
 import android.text.TextUtils;
 import android.view.View;
@@ -39,12 +40,12 @@
         mAuth = FirebaseAuth.getInstance();
         fstore = FirebaseFirestore.getInstance();
 
-        nameField = findViewById(R.id.name);
+        nameField = findViewById(R.id.username);
         emailField = findViewById(R.id.email);
         passwordField = findViewById(R.id.password);
         confirmPasswordField = findViewById(R.id.confirmPassword);
-        mobileField = findViewById(R.id.mobile);
-        registerButton = findViewById(R.id.registerButton);
+        mobileField = findViewById(R.id.phone_number);
+        registerButton = findViewById(R.id.signup_button);
 
         registerButton.setOnClickListener(new View.OnClickListener() {
             @Override
@@ -89,7 +90,9 @@
                                 user.put("role", "User");
                                 user.put("tier", "Bronze");
                                 user.put("points", 0);
-                                user.put("createdAt", LocalDateTime.now().toString());
+                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+                                    user.put("createdAt", LocalDateTime.now().toString());
+                                }
                                 user.put("availableVouchers", new ArrayList<String>());
                                 user.put("previousVouchers", new ArrayList<String>());
                                 user.put("password", password);
Index: app/src/main/res/layout/activity_registration.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><LinearLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\"\r\n    android:padding=\"16dp\">\r\n\r\n    <EditText\r\n        android:id=\"@+id/name\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:hint=\"Full Name\"\r\n        android:inputType=\"textPersonName\"/>\r\n\r\n    <EditText\r\n        android:id=\"@+id/email\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:hint=\"Email\"\r\n        android:inputType=\"textEmailAddress\"/>\r\n\r\n    <EditText\r\n        android:id=\"@+id/mobile\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:hint=\"Mobile Number\"\r\n        android:inputType=\"phone\"/>\r\n\r\n    <EditText\r\n        android:id=\"@+id/password\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:hint=\"Password\"\r\n        android:inputType=\"textPassword\"/>\r\n\r\n    <EditText\r\n        android:id=\"@+id/confirmPassword\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:hint=\"Confirm Password\"\r\n        android:inputType=\"textPassword\"/>\r\n\r\n    <Button\r\n        android:id=\"@+id/registerButton\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Register\"/>\r\n\r\n</LinearLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_registration.xml b/app/src/main/res/layout/activity_registration.xml
--- a/app/src/main/res/layout/activity_registration.xml	(revision 367e14383b2879db95787499e599d137333c8c72)
+++ b/app/src/main/res/layout/activity_registration.xml	(date 1744107794897)
@@ -1,49 +1,132 @@
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+
     android:layout_width="match_parent"
     android:layout_height="match_parent"
+
+    tools:context=".Login"
     android:orientation="vertical"
-    android:padding="16dp">
+    android:background="@color/white"
+    android:padding="20dp">
+
+    <ImageView
+        android:id="@+id/login_logo"
+        android:layout_width="150dp"
+        android:layout_height="70dp"
+        android:src="@drawable/wowcher_logo"
+        android:scaleType="centerCrop"
+        android:layout_gravity="center"/>
 
-    <EditText
-        android:id="@+id/name"
+    <TextView
+        android:id="@+id/login_greeting"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:fontFamily="@font/bungee"
+        android:text="Welcome,"
+        android:textSize="30dp"
+        />
+
+    <TextView
+        android:id="@+id/login_instruction"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Sign Up to find the best deals!"
+        android:textSize="18sp"
+        android:fontFamily="@font/antic"/>
+
+    <LinearLayout
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:hint="Full Name"
-        android:inputType="textPersonName"/>
+        android:layout_marginTop="20dp"
+        android:layout_marginBottom="20dp"
+        android:orientation="vertical">
 
-    <EditText
-        android:id="@+id/email"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:hint="Email"
-        android:inputType="textEmailAddress"/>
+        <!-- Username -->
+        <com.google.android.material.textfield.TextInputLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="Username"
+            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox">
 
-    <EditText
-        android:id="@+id/mobile"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:hint="Mobile Number"
-        android:inputType="phone"/>
+            <com.google.android.material.textfield.TextInputEditText
+                android:id="@+id/username"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"/>
+        </com.google.android.material.textfield.TextInputLayout>
+
+        <!-- Password -->
+        <com.google.android.material.textfield.TextInputLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="Password"
+            app:endIconMode="password_toggle"
+            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
+            android:layout_marginTop="15dp">
 
-    <EditText
-        android:id="@+id/password"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:hint="Password"
-        android:inputType="textPassword"/>
+            <com.google.android.material.textfield.TextInputEditText
+                android:id="@+id/password"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:inputType="textPassword"/>
+        </com.google.android.material.textfield.TextInputLayout>
 
-    <EditText
-        android:id="@+id/confirmPassword"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:hint="Confirm Password"
-        android:inputType="textPassword"/>
+        <!-- Confirm Password -->
+        <com.google.android.material.textfield.TextInputLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="Confirm Password"
+            app:endIconMode="password_toggle"
+            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
+            android:layout_marginTop="15dp">
+
+            <com.google.android.material.textfield.TextInputEditText
+                android:id="@+id/confirmPassword"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:inputType="textPassword"/>
+        </com.google.android.material.textfield.TextInputLayout>
+
+        <!-- Email -->
+        <com.google.android.material.textfield.TextInputLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="E-mail"
+            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
+            android:layout_marginTop="15dp">
+
+            <com.google.android.material.textfield.TextInputEditText
+                android:id="@+id/email"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"/>
+        </com.google.android.material.textfield.TextInputLayout>
+
+        <!-- Phone Number -->
+        <com.google.android.material.textfield.TextInputLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="Phone Number"
+            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
+            android:layout_marginTop="15dp">
 
-    <Button
-        android:id="@+id/registerButton"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:text="Register"/>
+            <com.google.android.material.textfield.TextInputEditText
+                android:id="@+id/phone_number"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"/>
+        </com.google.android.material.textfield.TextInputLayout>
+
+        <!-- Register Button -->
+        <Button
+            android:id="@+id/signup_button"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="GO"
+            android:background="@color/black"
+            android:textColor="@color/white"
+            android:layout_marginTop="30dp"
+            android:layout_marginBottom="5dp"
+            />
 
+    </LinearLayout>
 </LinearLayout>
